<?php
// src/AppBundle/Entity/User.php
namespace Creativer\FrontBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\UserInterface;
use Doctrine\Common\Collections\ArrayCollection;
use JMS\Serializer\Annotation as JMS;
use Gedmo\Mapping\Annotation as Gedmo;
use JMS\Serializer\Annotation\MaxDepth;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;


/**
 * @ORM\Entity
 * @ORM\Table(name="app_users")
 * @JMS\ExclusionPolicy("all")
 * @UniqueEntity(fields="email", message="Такой email уже существует")
 */
class User implements UserInterface, \Serializable
{
    /**
     * @ORM\Column(type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @JMS\Expose
     * @JMS\Groups({"idUserByIdImage", "getUser", "getCatalogProductAlbums", "getPostsByCategory", "getPostById", "getEvent"})
     */
    private $id;

    /**
     * @ORM\Column(type="string", length=25)
     * @JMS\Expose
     * @JMS\Groups({"getUser"})
     * @Assert\NotBlank(message="Имя пользователя не может быть пустым")
     * @JMS\Groups({"getCatalogProductAlbums", "getPostsByCategory", "getPostById", "getEvent"})

     */
    private $username;

    /**
     * @ORM\Column(type="string", length=25)
     * @JMS\Expose
     * @JMS\Groups({"getUser"})
     * @Assert\NotBlank(message="Фамилия пользователя не может быть пустым")
     * @JMS\Groups({"getCatalogProductAlbums", "getPostsByCategory", "getPostById", "getEvent"})
     */
    private $lastname;

    /**
     * @ORM\Column(type="string", length=255)
     * @JMS\Expose
     * @JMS\Groups({"getImageComments", "getUser", "getPostsByCategory", "getPostById", "getEvent"})
     */
    private $avatar;


    /**
     * @ORM\Column(type="string", length=64)
     * @Assert\NotBlank(message="Пароль не может быть пустым")
     */
    private $password;

    /**
     * @ORM\Column(type="string", length=64)
     */
    private $real_password;

    /**
     * @ORM\Column(type="string", length=60, unique=true)
     * @JMS\Expose
     * @Assert\NotBlank(message="Email не может быть пустым")
     * @Assert\Email()
     */
    private $email;

    /**
     * @JMS\Expose
     * @JMS\Type("Creativer\FrontBundle\Entity\Albums")
     * @ORM\OneToMany(targetEntity="Albums", mappedBy="user", fetch="EAGER")
     * @JMS\Groups({"getUser"})
     **/
    private $albums;


    /**
     * @JMS\Type("Creativer\FrontBundle\Entity\Events")
     * @ORM\OneToMany(targetEntity="Events", mappedBy="user", fetch="EAGER")
     **/
    private $events;


    /**
     * @JMS\Type("Creativer\FrontBundle\Entity\Posts")
     * @ORM\OneToMany(targetEntity="Posts", mappedBy="user", fetch="EAGER")
     **/
    private $posts;

    /**
     * @JMS\Type("Creativer\FrontBundle\Entity\Comments")
     * @ORM\OneToMany(targetEntity="Comments", mappedBy="user", fetch="EAGER")
     **/
    private $comments;

    /**
     * @JMS\Type("Creativer\FrontBundle\Entity\PostComments")
     * @ORM\OneToMany(targetEntity="PostComments", mappedBy="user", fetch="EAGER")
     **/
    private $post_comments;

    /**
     * @JMS\Type("Creativer\FrontBundle\Entity\PostBaraholka")
     * @ORM\OneToMany(targetEntity="PostBaraholka", mappedBy="user", fetch="EAGER")
     **/
    private $post_baraholka;


    /**
     * @JMS\Type("Creativer\FrontBundle\Entity\EventComments")
     * @ORM\OneToMany(targetEntity="EventComments", mappedBy="user", fetch="EAGER")
     **/
    private $event_comments;

    /**
     * @JMS\Type("Creativer\FrontBundle\Entity\ImageComments")
     * @ORM\OneToMany(targetEntity="ImageComments", mappedBy="user", fetch="EAGER")
     **/
    private $image_comments;

    /**
     * @JMS\Expose
     * @JMS\Type("Creativer\FrontBundle\Entity\Folders")
     * @ORM\OneToMany(targetEntity="Folders", mappedBy="user", fetch="EAGER")
     * @JMS\Groups({"getUser"})
     **/
    private $folders;

    /**
     * @ORM\Column(type="integer", nullable=false)
     * @JMS\Expose
     * @JMS\Groups({"getImageComments", "getUser"})
     */
    private $likes = 0;

    /**
     * @ORM\Column(type="text",  nullable=true)
     * @JMS\Expose
     * @JMS\Groups({"getUser"})
     */
    private $status;

    /**
     * @ORM\Column(type="text", nullable=true)
     * @JMS\Expose
     * @JMS\Groups({"getUser"})
     */
    private $position;

    /**
     * @ORM\Column(type="text", nullable=true)
     * @JMS\Expose
     * @JMS\Groups({"getUser"})
     */
    private $info;

    /**
     * @ORM\Column(type="text", nullable=true)
     * @JMS\Expose
     * @JMS\Groups({"getUser"})
     */
    private $specialization;

    /**
     * @ORM\Column(type="text", nullable=true)
     * @JMS\Expose
     * @JMS\Groups({"getUser"})
     */
    private $worked;

    /**
     * @ORM\Column(type="text", nullable=true)
     * @JMS\Expose
     * @JMS\Groups({"getUser"})
     */
    private $links;

    /**
     * @ORM\Column(type="text", nullable=true)
     * @JMS\Expose
     * @JMS\Groups({"getUser"})
     */
    private $contacts;

    /**
     * @ORM\Column(type="integer", nullable=true, options={"default" = 0})
     * @JMS\Expose
     * @JMS\Groups({"getUser"})
     */
    private $views;

    /**
     * @JMS\Expose
     * @var \DateTime $date
     * @JMS\Groups({"getUser"})
     * @Gedmo\Timestampable(on="create")
     * @ORM\Column(type="datetime")
     */
    private $date;

    /**
     * @JMS\Type("Creativer\FrontBundle\Entity\User")
     * @ORM\ManyToMany(targetEntity="User", mappedBy="myFavorits")
     * @JMS\Groups({"getUser"})
     * @MaxDepth(2)
     * @JMS\Expose
     */
    private $favoritsWithMe;

    /**
     * @JMS\Expose
     * @JMS\Type("Creativer\FrontBundle\Entity\User")
     * @ORM\ManyToMany(targetEntity="User", inversedBy="favoritsWithMe")
     * @ORM\JoinTable(name="favorits",
     *      joinColumns={@ORM\JoinColumn(name="user_id", referencedColumnName="id")},
     *      inverseJoinColumns={@ORM\JoinColumn(name="favorit_user_id", referencedColumnName="id")}
     *      )
     * @JMS\Groups({"getUser"})
     */
    private $myFavorits;


    /**
     * @ORM\Column(name="is_active", type="boolean")
     */
    private $isActive;

    /**
     * @ORM\ManyToMany(targetEntity="Role", inversedBy="users", cascade={"persist"})
     * @ORM\JoinTable(name="user_role",
     *      joinColumns={@ORM\JoinColumn(name="user_id", referencedColumnName="id")},
     *      inverseJoinColumns={@ORM\JoinColumn(name="role_id", referencedColumnName="id")}
     *      )
     * @JMS\Expose
     * @JMS\Groups({"getUser"})
     */
    private $roles;

    /**
     * @JMS\Expose
     * @JMS\Type("Creativer\FrontBundle\Entity\Wall")
     * @ORM\OneToOne(targetEntity="Wall", mappedBy="user")
     * @JMS\Groups({"getUser"})
     * @JMS\MaxDepth(8)
     */
    private $wall;

    /**
     * @ORM\ManyToMany(targetEntity="Events", inversedBy="users_attend")
     * @ORM\JoinTable(name="users_attend_events")
     */
    private $events_attend;

    public function __construct()
    {
        $this->isActive = true;
        // may not be needed, see section on salt below
        // $this->salt = md5(uniqid(null, true));
        $this->roles = new ArrayCollection();
        $this->date = new \DateTime();
        $this->favoritsWithMe = new \Doctrine\Common\Collections\ArrayCollection();
        $this->myFavorits = new \Doctrine\Common\Collections\ArrayCollection();
        $this->events = new \Doctrine\Common\Collections\ArrayCollection();
        $this->events_attend = new \Doctrine\Common\Collections\ArrayCollection();
    }

    public function getUsername()
    {
        return $this->username;
    }

    public function getLastname()
    {
        return $this->lastname;
    }


    public function getSalt()
    {
        // you *may* need a real salt depending on your encoder
        // see section on salt below
        return null;
    }

    public function getPassword()
    {
        return $this->password;
    }

    public function getRoles()
    {
        return $this->roles->toArray();
    }


    public function eraseCredentials()
    {
    }

    /** @see \Serializable::serialize() */
    public function serialize()
    {
        return serialize(array(
            $this->id,
            $this->email,
            $this->password,
            // see section on salt below
            // $this->salt,
        ));
    }

    /** @see \Serializable::unserialize() */
    public function unserialize($serialized)
    {
        list (
            $this->id,
            $this->email,
            $this->password,
            // see section on salt below
            // $this->salt
            ) = unserialize($serialized);
    }


}
